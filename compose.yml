version: "3.8"

services:
  app:
    build: ./docker/php
    volumes:
      - ./src:/work/web

  # appやwebにnode.jsをインストールするのは単一責任の原則に反するので、別のコンテナにする
  node:
    image: node:18-alpine
    ports:
      - 5174:5174 #
    volumes:
      - ./src:/work/web
    working_dir: /work/web
    tty: true
    depends_on:
      - app

  web:
    image: nginx
    ports:
      - 8080:80 #
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./src:/work/web
    depends_on:
      - app

  mysql: #env.ファイルのDB_HOST名と対応
    image: mysql:8.0
    command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
    volumes:
      # - ./docker/db-store:/var/lib/mysql
      - laravel-practice-db-data:/var/lib/mysql
      - ./docker/mysql/config:/etc/mysql/conf.d
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=password #
      - MYSQL_DATABASE=practice #init.sqlファイルも変更
      - MYSQL_USER=posse #
      - MYSQL_PASSWORD=password #
      - TZ=Asia/Tokyo

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_ARBITRARY=0
      - PMA_HOSTS=mysql
      - PMA_USER=posse
      - PMA_PASSWORD=password
    links:
      - mysql
    ports:
      - 1236:80 #

volumes:
  laravel-practice-db-data: #コンテナごとに名前変える->36行目の対応部分も変更


#yml, env. init.sqlを適宜変更

#1. ymlファイルを変更
#2. init.sqlを変更
#3. docker compose build --no--cache (ビルドする)
#4. docker compose up -d (コンテナをたてる)
#5. docker compose exec app sh (appコンテナに入る)
#6. composer create-project --prefer-dist laravel/laravel . "10.*" (src配下にLaravel10をインストール)
#7. ブラウザで http://localhost にアクセスし、Laravelのロゴ入りのトップページが表示されることを確認
#8. appコンテナに入っていることを確認 (入っていなければ、docker compose exec app sh)
#9. src > .env の11-16行目を以下のように書き換える
#10. php artisan migrate をして、以下のように出力されていれば成功
